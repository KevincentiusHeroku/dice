
import { Container } from "./container";
import { dice, prototype, provides, requires, singleton } from "./dices";

class TestUnresolvable {}

@dice() class TestRequired {}
@singleton() class TestRequiredSingleton {}
@dice() class TestProvided {}

@prototype()
class TestPrototype {
  @requires(TestRequired) private testRequired!: TestRequired;

  getRequired() { return this.testRequired; }
}

@dice()
class TestChild {
  @requires(TestRequired) private testRequired!: TestRequired;
  @provides(TestRequired) private testRequired2!: TestRequired;
  @requires(TestRequiredSingleton) private testRequiredSingleton!: TestRequiredSingleton;

  getRequired() { return this.testRequired; }
  getRequired2() { return this.testRequired2; }
  getRequiredSingleton() { return this.testRequiredSingleton; }
}

@singleton()
class TestParent {
  @provides(TestRequired) private testRequired!: TestRequired;
  @provides(TestRequired) private testRequired2!: TestRequired;
  @requires(TestRequiredSingleton) private testRequiredSingleton!: TestRequiredSingleton;
  @requires(TestChild) private testChild!: TestChild;

  getChild() { return this.testChild; }
  getRequired() { return this.testRequired; }
  getRequired2() { return this.testRequired2; }
  getRequiredSingleton() { return this.testRequiredSingleton; }
}

describe(Container.name, () => {
  it('should throw an error when unable to resolve', () => {
    const container = new Container();
    expect(() => container.get(TestUnresolvable)).toThrow();
  });
});
